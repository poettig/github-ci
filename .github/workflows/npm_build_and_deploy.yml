name: Build an npm project and deploy to a server (only if the branch is "main" or "development")

# Inputs from project variables
# vars.TARGET_HOST{_PROD,STAGING}: The hostname of the target server.
# vars.TARGET_USER{_PROD,STAGING}: The user to use for connection to the target server.
# vars.TARGET_DIRECTORY{_PROD,STAGING}: The base directory to deploy to. The main branch will deploy to <TARGET_BASE_DIRECTORY>/prod, the development branch to <TARGET_BASE_DIRECTORY>/staging. The default is an empty string. Must not end with "/". If it does, there will most likely be errors.
# vars.RESTART_SERVICES{_PROD,STAGING}: A service or space-separated list of services to restart after sucessful deploy.

on:
  workflow_call:
    secrets:
      DEPLOY_SSH_KEY:
        required: true
    inputs:
      branch:
        type: string
        required: true
        description: The branch to build and deploy.
      node_version:
        type: string
        required: true
        description: The node version to build with.
      npm_build_script:
        type: string
        default: build
        description: The name of the npm script to run for building the branch. `npm ci --omit=dev` is run as a previous step. Defaults to `build`.
      build_env:
        type: string
        description: Environment variables passed to the build script as a JSON string.
      source_directory:
        type: string
        default: "dist/"
        description: The build result directory to deploy. Defaults to "dist/".
      rsync_args:
        type: string
        default: "--delete -rvzci"
        description: The arguments for rsync. Defaults to `--delete -rvzci`.

concurrency:
  group: ci-${{ inputs.branch }}
  cancel-in-progress: true

env:
  TARGET_HOST: "${{ inputs.branch == 'main' && (vars.TARGET_HOST_PROD || vars.TARGET_HOST) || (vars.TARGET_HOST_STAGING || vars.TARGET_HOST) }}"
  TARGET_USER: "${{ inputs.branch == 'main' && (vars.TARGET_USER_PROD || vars.TARGET_USER) || (vars.TARGET_USER_STAGING || vars.TARGET_USER) }}"
  TARGET_DIRECTORY: "${{ inputs.branch == 'main' && (vars.TARGET_DIRECTORY_PROD || vars.TARGET_DIRECTORY) || (vars.TARGET_DIRECTORY_STAGING || vars.TARGET_DIRECTORY) }}"
  RESTART_SERVICES: "${{ inputs.branch == 'main' && (vars.RESTART_SERVICES_PROD || vars.RESTART_SERVICES) || (vars.RESTART_SERVICES_STAGING || vars.RESTART_SERVICES) }}"

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository to get templates
        uses: actions/checkout@v4

      - name: Create environment
        shell: bash
        run: |
          for input in ${{ inputs.build_env }}; do
            echo $input
          done
          
          echo "TEST_ENV=hallo" >> "$GITHUB_ENV"
          echo "MASKED_TEST_ENV=hallo" >> "$GITHUB_ENV"
          
          echo "::add-mask::thisvalueismasked"
          echo "::add-mask::$MASKED_TEST_ENV"

      # As action for clean definition and reusability
      - name: Build ${{ github.repository }}
        uses: poettig/github-ci/build_npm@main
        with:
          branch: ${{ inputs.branch }}
          node_version: ${{ inputs.node_version }}
          npm_build_script: ${{ inputs.npm_build_script }}

      # As action to only need the if condition once
      - name: Deploy ${{ github.repository }}
        if: "${{ inputs.branch == 'main' || inputs.branch == 'development' }}"
        uses: poettig/github-ci/deploy_npm@main
        with:
          branch: ${{ inputs.branch }}
          source_directory: ${{ inputs.source_directory }}
          target_host: ${{ env.TARGET_HOST }}
          target_user: ${{ env.TARGET_USER }}
          target_directory: ${{ env.TARGET_DIRECTORY }}
          rsync_args: ${{ inputs.rsync_args }}
          ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Restart requested services
        if: "${{ env.RESTART_SERVICES && (inputs.branch == 'main' || inputs.branch == 'development') }}"
        uses: poettig/github-ci/restart_services@main
        with:
          services: ${{ env.RESTART_SERVICES }}
          target_host: ${{ env.TARGET_HOST }}
          target_user: ${{ env.TARGET_USER }}
          ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}
